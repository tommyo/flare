//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: spark/connect/common.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// StorageLevel for persisting Datasets/Tables.
type StorageLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Whether the cache should use disk or not.
	UseDisk bool `protobuf:"varint,1,opt,name=use_disk,json=useDisk,proto3" json:"use_disk,omitempty"`
	// (Required) Whether the cache should use memory or not.
	UseMemory bool `protobuf:"varint,2,opt,name=use_memory,json=useMemory,proto3" json:"use_memory,omitempty"`
	// (Required) Whether the cache should use off-heap or not.
	UseOffHeap bool `protobuf:"varint,3,opt,name=use_off_heap,json=useOffHeap,proto3" json:"use_off_heap,omitempty"`
	// (Required) Whether the cached data is deserialized or not.
	Deserialized bool `protobuf:"varint,4,opt,name=deserialized,proto3" json:"deserialized,omitempty"`
	// (Required) The number of replicas.
	Replication int32 `protobuf:"varint,5,opt,name=replication,proto3" json:"replication,omitempty"`
}

func (x *StorageLevel) Reset() {
	*x = StorageLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageLevel) ProtoMessage() {}

func (x *StorageLevel) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageLevel.ProtoReflect.Descriptor instead.
func (*StorageLevel) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{0}
}

func (x *StorageLevel) GetUseDisk() bool {
	if x != nil {
		return x.UseDisk
	}
	return false
}

func (x *StorageLevel) GetUseMemory() bool {
	if x != nil {
		return x.UseMemory
	}
	return false
}

func (x *StorageLevel) GetUseOffHeap() bool {
	if x != nil {
		return x.UseOffHeap
	}
	return false
}

func (x *StorageLevel) GetDeserialized() bool {
	if x != nil {
		return x.Deserialized
	}
	return false
}

func (x *StorageLevel) GetReplication() int32 {
	if x != nil {
		return x.Replication
	}
	return 0
}

// ResourceInformation to hold information about a type of Resource.
// The corresponding class is 'org.apache.spark.resource.ResourceInformation'
type ResourceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) The name of the resource
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// (Required) An array of strings describing the addresses of the resource.
	Addresses []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ResourceInformation) Reset() {
	*x = ResourceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInformation) ProtoMessage() {}

func (x *ResourceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInformation.ProtoReflect.Descriptor instead.
func (*ResourceInformation) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceInformation) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

// An executor resource request.
type ExecutorResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) resource name.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// (Required) resource amount requesting.
	Amount int64 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Optional script used to discover the resources.
	DiscoveryScript *string `protobuf:"bytes,3,opt,name=discovery_script,json=discoveryScript,proto3,oneof" json:"discovery_script,omitempty"`
	// Optional vendor, required for some cluster managers.
	Vendor *string `protobuf:"bytes,4,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
}

func (x *ExecutorResourceRequest) Reset() {
	*x = ExecutorResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutorResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorResourceRequest) ProtoMessage() {}

func (x *ExecutorResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorResourceRequest.ProtoReflect.Descriptor instead.
func (*ExecutorResourceRequest) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutorResourceRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *ExecutorResourceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *ExecutorResourceRequest) GetDiscoveryScript() string {
	if x != nil && x.DiscoveryScript != nil {
		return *x.DiscoveryScript
	}
	return ""
}

func (x *ExecutorResourceRequest) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

// A task resource request.
type TaskResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) resource name.
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// (Required) resource amount requesting as a double to support fractional
	// resource requests.
	Amount float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *TaskResourceRequest) Reset() {
	*x = TaskResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResourceRequest) ProtoMessage() {}

func (x *TaskResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResourceRequest.ProtoReflect.Descriptor instead.
func (*TaskResourceRequest) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{3}
}

func (x *TaskResourceRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *TaskResourceRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type ResourceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Optional) Resource requests for executors. Mapped from the resource name
	// (e.g., cores, memory, CPU) to its specific request.
	ExecutorResources map[string]*ExecutorResourceRequest `protobuf:"bytes,1,rep,name=executor_resources,json=executorResources,proto3" json:"executor_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// (Optional) Resource requests for tasks. Mapped from the resource name
	// (e.g., cores, memory, CPU) to its specific request.
	TaskResources map[string]*TaskResourceRequest `protobuf:"bytes,2,rep,name=task_resources,json=taskResources,proto3" json:"task_resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ResourceProfile) Reset() {
	*x = ResourceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceProfile) ProtoMessage() {}

func (x *ResourceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceProfile.ProtoReflect.Descriptor instead.
func (*ResourceProfile) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceProfile) GetExecutorResources() map[string]*ExecutorResourceRequest {
	if x != nil {
		return x.ExecutorResources
	}
	return nil
}

func (x *ResourceProfile) GetTaskResources() map[string]*TaskResourceRequest {
	if x != nil {
		return x.TaskResources
	}
	return nil
}

type Origin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Indicate the origin type.
	//
	// Types that are assignable to Function:
	//
	//	*Origin_PythonOrigin
	Function isOrigin_Function `protobuf_oneof:"function"`
}

func (x *Origin) Reset() {
	*x = Origin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Origin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Origin) ProtoMessage() {}

func (x *Origin) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Origin.ProtoReflect.Descriptor instead.
func (*Origin) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{5}
}

func (m *Origin) GetFunction() isOrigin_Function {
	if m != nil {
		return m.Function
	}
	return nil
}

func (x *Origin) GetPythonOrigin() *PythonOrigin {
	if x, ok := x.GetFunction().(*Origin_PythonOrigin); ok {
		return x.PythonOrigin
	}
	return nil
}

type isOrigin_Function interface {
	isOrigin_Function()
}

type Origin_PythonOrigin struct {
	PythonOrigin *PythonOrigin `protobuf:"bytes,1,opt,name=python_origin,json=pythonOrigin,proto3,oneof"`
}

func (*Origin_PythonOrigin) isOrigin_Function() {}

type PythonOrigin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// (Required) Name of the origin, for example, the name of the function
	Fragment string `protobuf:"bytes,1,opt,name=fragment,proto3" json:"fragment,omitempty"`
	// (Required) Callsite to show to end users, for example, stacktrace.
	CallSite string `protobuf:"bytes,2,opt,name=call_site,json=callSite,proto3" json:"call_site,omitempty"`
}

func (x *PythonOrigin) Reset() {
	*x = PythonOrigin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spark_connect_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PythonOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PythonOrigin) ProtoMessage() {}

func (x *PythonOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_spark_connect_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PythonOrigin.ProtoReflect.Descriptor instead.
func (*PythonOrigin) Descriptor() ([]byte, []int) {
	return file_spark_connect_common_proto_rawDescGZIP(), []int{6}
}

func (x *PythonOrigin) GetFragment() string {
	if x != nil {
		return x.Fragment
	}
	return ""
}

func (x *PythonOrigin) GetCallSite() string {
	if x != nil {
		return x.CallSite
	}
	return ""
}

var File_spark_connect_common_proto protoreflect.FileDescriptor

var file_spark_connect_common_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73, 0x70,
	0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x0c,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x75, 0x73, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x66,
	0x66, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x4f, 0x66, 0x66, 0x48, 0x65, 0x61, 0x70, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47,
	0x0a, 0x13, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc3, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2e, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x13, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xa5, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x0e, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x6c, 0x0a, 0x16, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x64, 0x0a, 0x12, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5f, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x61,
	0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x0c, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x42, 0x94, 0x01, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x42, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6f,
	0x6d, 0x6d, 0x79, 0x6f, 0x2f, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0xa2, 0x02, 0x03, 0x53, 0x43, 0x58, 0xaa, 0x02, 0x0d, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0xca, 0x02, 0x0d, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x5c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0xe2, 0x02, 0x19, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x5c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0e, 0x53, 0x70, 0x61, 0x72, 0x6b, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spark_connect_common_proto_rawDescOnce sync.Once
	file_spark_connect_common_proto_rawDescData = file_spark_connect_common_proto_rawDesc
)

func file_spark_connect_common_proto_rawDescGZIP() []byte {
	file_spark_connect_common_proto_rawDescOnce.Do(func() {
		file_spark_connect_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_spark_connect_common_proto_rawDescData)
	})
	return file_spark_connect_common_proto_rawDescData
}

var file_spark_connect_common_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_spark_connect_common_proto_goTypes = []any{
	(*StorageLevel)(nil),            // 0: spark.connect.StorageLevel
	(*ResourceInformation)(nil),     // 1: spark.connect.ResourceInformation
	(*ExecutorResourceRequest)(nil), // 2: spark.connect.ExecutorResourceRequest
	(*TaskResourceRequest)(nil),     // 3: spark.connect.TaskResourceRequest
	(*ResourceProfile)(nil),         // 4: spark.connect.ResourceProfile
	(*Origin)(nil),                  // 5: spark.connect.Origin
	(*PythonOrigin)(nil),            // 6: spark.connect.PythonOrigin
	nil,                             // 7: spark.connect.ResourceProfile.ExecutorResourcesEntry
	nil,                             // 8: spark.connect.ResourceProfile.TaskResourcesEntry
}
var file_spark_connect_common_proto_depIdxs = []int32{
	7, // 0: spark.connect.ResourceProfile.executor_resources:type_name -> spark.connect.ResourceProfile.ExecutorResourcesEntry
	8, // 1: spark.connect.ResourceProfile.task_resources:type_name -> spark.connect.ResourceProfile.TaskResourcesEntry
	6, // 2: spark.connect.Origin.python_origin:type_name -> spark.connect.PythonOrigin
	2, // 3: spark.connect.ResourceProfile.ExecutorResourcesEntry.value:type_name -> spark.connect.ExecutorResourceRequest
	3, // 4: spark.connect.ResourceProfile.TaskResourcesEntry.value:type_name -> spark.connect.TaskResourceRequest
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_spark_connect_common_proto_init() }
func file_spark_connect_common_proto_init() {
	if File_spark_connect_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spark_connect_common_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*StorageLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ExecutorResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TaskResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ResourceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Origin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spark_connect_common_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*PythonOrigin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spark_connect_common_proto_msgTypes[2].OneofWrappers = []any{}
	file_spark_connect_common_proto_msgTypes[5].OneofWrappers = []any{
		(*Origin_PythonOrigin)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spark_connect_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spark_connect_common_proto_goTypes,
		DependencyIndexes: file_spark_connect_common_proto_depIdxs,
		MessageInfos:      file_spark_connect_common_proto_msgTypes,
	}.Build()
	File_spark_connect_common_proto = out.File
	file_spark_connect_common_proto_rawDesc = nil
	file_spark_connect_common_proto_goTypes = nil
	file_spark_connect_common_proto_depIdxs = nil
}
